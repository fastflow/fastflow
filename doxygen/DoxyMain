//**********************************
// Author Marco Aldinucci
// Changelog:
// August 2014: Partial but consistent class documentation of multicore part
//**********************************




//********************************
Main Page contents
//********************************

/*! \mainpage FastFlow Documentation
 *
 *  \section geninfo_sec Parallel programming in FastFlow
 *
 *  FastFlow is a C++ parallel programming framework
 * advocating high-level, pattern-based parallel programming. It chiefly
 * supports streaming and data parallelism, targeting heterogenous
 * platforms composed of clusters of shared-memory platforms, possibly
 * equipped with computing accelerators such as NVidia GPGPUs, Xeon Phi,
 * Tilera TILE64.  
 *
 * The main design philosophy of FastFlow is to provide application
 * designers with key features for parallel programming
 * (e.g. time-to-market, portability, efficiency and performance
 * portability) via suitable parallel programming abstractions and a
 * carefully designed run-time support. 
 *
 *
 *  \section app_sec  Application scenarios
 *
 *  FastFlow is a general-purpose C++ programming framework for
 *  heterogenous parallel platforms. Like other high-level programming
 *  frameworks, such as Intel TBB and OpenMP, it simplifies the design
 *  and engineering of portable parallel applications. However, it has
 *  a clear edge in terms of expressiveness and performance with
 *  respect to other parallel programming frameworks in specific
 *  application scenarios, including, inter alia:
 * 
 * \li fine-grain parallelism on cache-coherent shared-memory platforms;
 * \li streaming applications;
 * \li coupled usage of multi-core and accelerators.
 *
 * In other cases FastFlow is typically comparable to (and is some
 * cases slightly faster than) state-of-the-art parallel programming
 * frameworks such as Intel TBB, OpenMP, Cilk, etc. More details may
 * be found on the performance page. A number of both micro-benchmarks
 * and real-world applications has been developed with FastFlow (or
 * ported from other parallel libraries) in order to asses its
 * usability and performance, among the others:
 * 
 * \li Bowtie2: fast and sensitive read alignment (multicore; porting of 
 * the original version developed with pthreads and spinlocks) 
 * \li Two-phase video/image restoration for impulsive/Gaussian noise 
 * (multicore, GPGPUs, heterogeneous; original algorithm)
 * \li Block-based dense LU and Cholesky decomposition (multicore, original algorithm)
 * \li Yadt C4.5 classifier (multicore; original algorithm)
 * \li CWC Gillespie simulator for systems biology (multicore, 
 * distributed, GPGPUs; original algorithm)
 * \li SWPS3: vectorized Smith-Waterman local alignment software 
 * (multicore; porting of the original version developed with pthreads)
 * \li pbzip2: Parallel BZIP2 (multicore; porting of the original version 
 * developed with POSIX processes)
 * \li Fast network deep packet inspection (multicore; original algorithm)
 * \li Several standard algorithms, such as nqueens, fibonacci, 
 * QT-mandebrot, matrix block multiplication, â€¦ (multicore, GPGPUs, 
 * distributed, heterogeneous) over 100 micro-benchmarks testing 
 * individual features and patterns (multicore, GPGPUs, distributed, 
 * heterogeneous)
 * 
 * The source code of (almost) all applications can be found in the 
 * FastFlow SVN repository under either LGPLv3 or GNU GPL license. 
 * The design of applications and their performance are described in 
 * research papers.
 *
 *  \section design_sec  Design
 * 
 * FastFlow comes as a C++ template library designed as a stack of
 * layers that progressively abstracts out the programming of parallel
 * applications. The goal of the stack is threefold: portability,
 * extensibility, and performance. For this, all the three layers are
 * realised as thin strata of C++ templates that are 1) seamlessly
 * portable; 2) easily extended via subclassing; and 3) statically
 * compiled and cross-optimised with the application. The terse design
 * ensures easy portability on almost all OSes and CPUs with a C++
 * compiler. The main development platform is Linux/x86_64/gcc, but it
 * has been tested also on various combinations of x86, x86_64, PPC,
 * ARM, Tilera, NVidia with gcc, icc, Visual Studio on Linux, Mac OS,
 * and Windows XP/7. The FastFlow core has been ported to ARM/iOS.

 *  \image html ff_architecture_new_bw.png
 *
 * The FastFlow run-time support uses several techniques to efficiently 
 * support fine grain parallelism (and very high frequency streaming). 
 * Among these are:
 *
 * \li non-blocking multi-threading with lock-less synchronisations;
 * \li zero-copy network messaging (via 0MQ/TCP and RDMA/Infiniband);
 * \li asynchronous data feeding for accelerator offloading.
 *
 * FastFlow has been adopted by a number of research projects and
 * third-party development initiatives, and has thus been tested in a
 * variety of application scenarios: from systems biology to
 * high-frequency trading.
 *
 */
//********************************
Namespaces
//********************************

/*!
 *  \namespace ff
 *
 *  \brief The principal namespace for the FastFlow library.
 *
 *  All classes and functions in the FastFlow library are contained within this
 *  namespace.
 */
 
//********************************
Modules
//********************************

 /*!
  *  \defgroup applications Applications & Benchmarks
  *
  *  \brief Benchmarks and applications for the FastFlow framework.
  *
  *  Benchmarks and applications are not part of the FastFlow 
  *  development framework and are provided to show main features and
  *  to provide users with coding examples and benchmarks. In many case they 
  *  are porting of existing open-source applications.
  *
  *  We encourage FastFlow users to send us their applications and examples.
  *  You can email us your benchmarks at aldinuc[@]di.unito.it.
  *
  */

//--------------------------------&------------------------------------------------

//--------------------------------
LEVEL 1
//--------------------------------
 /*!
  * \defgroup high_level_patterns High-level patterns
  *
  * \brief Patterns for "in-place" (easy) parallelisation of sequential code. 
  *
  *  They are clearly characterised in a specific usage context and are 
  * targeted to the parallelisation of sequential (legacy) code. 
  * Examples are exploitation of loop parallelism, stream parallelism, 
  * data-parallel algorithms, execution of general workflows of tasks, etc. 
  * The are typically equipped with self-optimisation capabilities (e.g. 
  * load-balancing, grain auto-tuning, parallelism-degree auto-tuning) 
  * and exhibit no or limited nesting capability. Examples are: 
  * parallel-for, pipeline, stencil-reduce, mdf (macro-data-flow). 
  * Some of them targets specific devices (e.g. GPGPUs). 
  * They are implemented on top of core patterns. 
  *
  */

/*!
  * \defgroup core_patterns Core patterns
  *
  * \brief Core patterns (basic streaming patterns)
  *
  * Basic streaming patterns: pipeline, farm and loopback qualifier
  *
  */

/*!
  * \defgroup building_blocks Building blocks
  *
  * \brief Run-time support building blocks
  *
  * Set up of Parallel activities, synchronisations, communications, ...
  *
  */

/*!
  * \defgroup aux_classes Auxiliary classes and functions
  *
  * \brief Auxiliary classes
  *
  * Auxiliary classes: general utility classes and algorithms
  *
  */

 

//--------------------------------&------------------------------------------------

  /*!
  *  \defgroup extra_functional_features Extra Functional Features
  * 
  *  \brief Not yet documented
  *
  */

 /*!
  *  \defgroup supported_platforms Supported platforms
  *
  *  \brief Supported HW platforms 
  *
  *  FastFlow targets multicore, many-core (GPGPUs) and distributed systems.
  *  
  *  \li Multicore: x86_64, Arm, PPC - Linux, Mac OS, Win 7/8
  *  \li Manycore: NVidia and AMD GPGPUs via CUDA and OpenCL. Experimental support for 
  *  TILE64 and Xeon Phi (not documented). 
  *  \li Distributed: TCP/IP via 0MQ and IB/OFED (not documented).
  *
  */

/*! \page related_pages Related Pages
 *
 *  @brief Scientific papers, website, code download, tutorial
 *  \li  FastFlow-related <a
 *  href="http://alpha.di.unito.it/parallel-programming-papers/fastflow-papers/"
 *  target="_blank">scientific papers</a> (only those authored by FastFlow core 
 *  developers, for a comprehensive listing search on Google)
 *  \li Latest source code on 
 *  <a href="https://sourceforge.net/p/mc-fastflow/code/HEAD/tree/">Sourceforge SVN</a>
 *  \li FastFlow web site <a href="calvados.di.unipi.it">home</a>
 *  \li Tutorial and programming examples (cooming soon)
 *
 *  
 */